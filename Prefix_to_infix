//i  will scanf the expression from right to left
///if operand then push in the stack
/// if operator the pop two operaand from the stack
///in this case the A operator B
// A is the first operand and B is the second operand
///whcih is reverse of postfix to infix

#include <bits/stdc++.h>
using namespace std;
 
bool isOperand(char x)
{
   return (x >= 'a' && x <= 'z') ||
          (x >= 'A' && x <= 'Z');
}
 
// Get Infix for a given postfix
// expression
string getInfix(string exp)
{
    stack<string> s;
 
    for (int i=exp.size()-1; i>=0; i--)
    {
        // Push operands
        if (isOperand(exp[i]))
        {
           string op(1, exp[i]);
           s.push(op);
        }
 
        // We assume that input is
        // a valid postfix and expect
        // an operator.
        else
        {
            string op1 = s.top();
            s.pop();
            string op2 = s.top();
            s.pop();
            s.push("(" + op1 + exp[i] +
                   op2 + ")");
        }
    }
 
    // There must be a single element
    // in stack now which is the required
    // infix.
    return s.top();
}
 
// Driver code
int main()
{
    string exp;
    cin>>exp;
    cout << getInfix(exp);
    return 0;
}
