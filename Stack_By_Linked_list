////this is collected from geeksforgeeks
#include<bits/stdc++.h>
using namespace std;

class Node{
public:

    int data;
    Node* next;

    Node(int d)
    {
        this->data=d;
        this->next=NULL;
    }
};

class Stack{
    Node* top;

public:
    Stack()
    {
        top=NULL;
    }

    void push(int d)
    {
        Node* temp=new Node(d);
        //// in case of stack i did not have any fixed size of list and stack 
        //// so i did not check for the overflow condition
        if(temp==NULL)
        {
            cout<<"Stack overflow"<<endl;
            exit(1);
        }

        temp->data=d;
        temp->next=top;
        top=temp;
    }
    
    bool isEmpty()
    {
        //if top is NULL it means that 
        ///there is no elements are in stack
        return top==NULL;
    }

    int peek()
    {
        if(!isEmpty())
        {
            return top->data;

        }
        else{
            exit(1);
        }
    }

    void pop()
    {
        Node* temp;

        //check for underlflow condition
        if(top==NULL)
        {
            cout<<"Stack underflow"<<endl;
            exit(1);
        }
        else{
            temp=top;

            ///Assiging second node to top
            top=top->next;

            free(temp);
        }

    }

    void display()
    {
        Node* temp;

        if(top==NULL)
        {
            cout<<"Stack underflow"<<endl;
            exit(1);
        }
        else{
            temp=top;

            while(temp!=NULL)
            {
                cout<<temp->data;

                temp=temp->next;

                if(temp!=NULL)
                {
                    cout<<"->";
                }
            }
        }
    }
};


int main()
{
   ///creating a stack

   Stack s;

   //push the elements of stack
   s.push(11);
   s.push(22);
   s.push(33);


   s.display(); 

   cout<<endl;

   cout<<s.peek();
   cout<<endl;

   s.pop();
   s.pop();
   
   cout<<endl;

   s.display();
   cout<<endl;

   cout<<s.peek()<<endl;

   return 0;
}
